; a generative tox configuration, see: https://tox.readthedocs.io/en/latest/config.html#generative-envlist
;
[tox]
skip_missing_interpreters=True
envlist =
    {py311-,py312-,py313-,}{doctest,unit,integration}{-cover,}
    {py311-,py312-,py313-,}{lint,format,report,coverage-check,docs-build,docs-lint},
    clean,
    spell,
    licenses,
    plain

[testenv]
skip_install = true
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
    PYTHONASYNCIODEBUG=1
    PHARMPYNOCONFIGFILE=1
passenv =
    *
usedevelop = false
allowlist_externals =
    bash
    rm
    printf
    false
commands =
    printf "ERROR: unknown environment '%s'\n" {envname}
    printf "Maybe factors where given in the wrong order?\n"
    false

[base]
deps =
    -rtest-requirements.txt
    cover: pytest-cov
    profile: pytest-profiling==1.8.1
    profile: gprof2dot==2025.04.14
    debug: pdbpp

[flags]
cover = --cov --cov-report=term-missing --cov-report=term:skip-covered --cov-report xml:.coverage.xml
profile = --profile-svg
debug = --pdb

[testenv:{py311,py312,py313,py311-unit,py312-unit,py313-unit,unit}{-cover,}{-profile,}{-debug,}]
skip_install = false
deps =
    -rrequirements.txt
    {[base]deps}
commands = pytest -n auto -vv \
    profile: {[flags]profile} \
    cover: {[flags]cover} \
    debug: {[flags]debug} \
    {posargs:tests}

[testenv:{py311-,py312-,py313-,}doctest{-cover,}]
skip_install = false
deps =
    -rrequirements.txt
    {[base]deps}
commands = pytest -W ignore::UserWarning -n auto -vv \
    profile: {[flags]profile} \
    cover: {[flags]cover} \
    debug: {[flags]debug} \
    --doctest-modules {posargs:src}

[testenv:{py311-,py312-,py313-,}integration{-cover,}{-profile,}{-debug,}]
skip_install = false
deps =
    -rrequirements.txt
    {[base]deps}
setenv =
    PHARMPYNOCONFIGFILE=0
commands = pytest -vv \
    profile: {[flags]profile} \
    cover: {[flags]cover} \
    debug: {[flags]debug} \
    {posargs:tests/integration}

[testenv:{py311-,py312-,py313-,}plain]
setenv =
    PHARMPYNOCONFIGFILE=0
skip_install = false
deps =
    -rrequirements.txt
commands = {posargs}

[testenv:spell]
basepython = {env:TOXPYTHON:python2.7}
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -j auto -b spelling docs dist/docs
deps =
    -rdocs-requirements.txt
    sphinxcontrib-spelling
    pyenchant

[testenv:{py311-,py312-,py313-,}docs-build]
skip_install = false
setenv =
    SPHINXOPTS = "-j 0"
deps =
    -rrequirements.txt
    -rdocs-requirements.txt
commands =
    rm -rf docs/api
    sphinx-build {posargs:-E} -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs

[testenv:{py311-,py312-,py313-,}{lint,format}]
deps =
    -rlint-requirements.txt
commands =
    check-manifest \
    format: -u \
    -v {toxinidir}
    black \
    lint: --check --diff \
    src tests setup.py
    flake8 src tests setup.py
    isort \
    lint: --check --diff \
    src tests setup.py
    bash scripts/lint_deps_imports.sh

[testenv:{py311-,py312-,py313-,}{type-check}]
deps =
    -rrequirements.txt
    -rlint-requirements.txt
; NOTE: Required for type-checking test files.
    -rtest-requirements.txt
commands =
    pyright {posargs:src/pharmpy/deps src/pharmpy/internals src/pharmpy/basic src/pharmpy/model src/pharmpy/modeling/compartments.py src/pharmpy/modeling/__init__.py src/pharmpy/modeling/random_variables.py src/pharmpy/modeling/lrt.py src/pharmpy/modeling/write_dataset.py src/pharmpy/modeling/help_functions.py src/pharmpy/modeling/units.py src/pharmpy/modeling/estimation.py src/pharmpy/modeling/estimation_steps.py src/pharmpy/modeling/parameters.py src/pharmpy/modeling/pd.py src/pharmpy/modeling/common.py src/pharmpy/modeling/iterators.py src/pharmpy/modeling/basic_models.py src/pharmpy/modeling/allometry.py src/pharmpy/modeling/blq.py src/pharmpy/modeling/parameter_variability.py src/pharmpy/modeling/odes.py src/pharmpy/modeling/tmdd.py src/pharmpy/modeling/math.py src/pharmpy/modeling/metabolite.py src/pharmpy/modeling/parameter_sampling.py src/pharmpy/modeling/evaluation.py src/pharmpy/modeling/covariate_effect.py src/pharmpy/modeling/error.py src/pharmpy/workflows/workflow.py src/pharmpy/workflows/task.py src/pharmpy/workflows/model_entry.py src/pharmpy/workflows/broadcasters src/pharmpy/workflows/args.py src/pharmpy/workflows/__init__.py src/pharmpy/workflows/dispatchers src/pharmpy/workflows/model_database/__init__.py src/pharmpy/workflows/hashing.py src/pharmpy/workflows/results.py src/pharmpy/workflows/log.py src/pharmpy/workflows/execute.py src/pharmpy/workflows/contexts src/pharmpy/tools/bootstrap src/pharmpy/tools/simulation src/pharmpy/tools/cdd src/pharmpy/mfl/model_features.py src/pharmpy/mfl/features}

[testenv:{py311-,py312-,py313-,}report]
deps = coverage
commands =
    coverage report
    coverage html

[testenv:{py311-,py312-,py313-,}coverage-check]
; Check certain level of test coverage for specific files else fail
deps = coverage
commands =
    coverage report --include=src/pharmpy/model/*.py,src/pharmpy/model/distributions/*,src/pharmpy/basic/*,src/pharmpy/modeling/allometry.py,src/pharmpy/modeling/basic_models.py,src/pharmpy/modeling/parameter_variability.py,src/pharmpy/mfl/* --fail-under=100

[testenv:clean]
commands = coverage erase
deps = coverage

[testenv:licenses]
skip_install = false
deps =
    -rrequirements.txt
    pip-licenses
commands =
    pip-licenses

[testenv:{py311-,py312-,py313-,}docs-lint]
skip_install = false
deps =
    -rrequirements.txt
    darglint2==1.8.2
commands =
    darglint2 --docstring-style numpy -z long src/pharmpy/modeling
    python scripts/lint_type_hints.py
