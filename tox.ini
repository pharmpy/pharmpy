; a generative tox configuration, see: https://tox.readthedocs.io/en/latest/config.html#generative-envlist
;
[tox]
skip_missing_interpreters=True
envlist =
    {py310-,py311-,py312-,}{doctest,unit,integration}{-cover,}
    {py310-,py311-,py312-,}{lint,format,report,docs-build,docs-test,docs-lint},
    clean,
    spell,
    licenses,
    plain

[testenv]
skip_install = true
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
    PYTHONASYNCIODEBUG=1
    PHARMPYNOCONFIGFILE=1
passenv =
    *
usedevelop = false
allowlist_externals =
    bash
    rm
    printf
    false
commands =
    printf "ERROR: unknown environment '%s'\n" {envname}
    printf "Maybe factors where given in the wrong order?\n"
    false

[base]
deps =
    -rtest-requirements.txt
    cover: pytest-cov
    profile: pytest-profiling
    profile: gprof2dot==2019.11.30
    debug: pdbpp

[flags]
cover = --cov --cov-report=term-missing --cov-report=term:skip-covered --cov-report xml:.coverage.xml
profile = --profile-svg
debug = --pdb

[testenv:{py310,py311,py312,py310-unit,py311-unit,py312-unit,unit}{-cover,}{-profile,}{-debug,}]
skip_install = false
deps =
    -rrequirements.txt
    {[base]deps}
commands = pytest -n auto -vv \
    profile: {[flags]profile} \
    cover: {[flags]cover} \
    debug: {[flags]debug} \
    {posargs:tests}

[testenv:{py310-,py311-,py312-,}doctest{-cover,}]
skip_install = false
deps =
    -rrequirements.txt
    {[base]deps}
commands = pytest -W ignore::UserWarning -n auto -vv \
    profile: {[flags]profile} \
    cover: {[flags]cover} \
    debug: {[flags]debug} \
    --doctest-modules {posargs:src}

[testenv:{py310-,py311-,py312-,}integration{-cover,}{-profile,}{-debug,}]
skip_install = false
deps =
    -rrequirements.txt
    {[base]deps}
setenv =
    PHARMPYNOCONFIGFILE=0
commands = pytest -vv \
    profile: {[flags]profile} \
    cover: {[flags]cover} \
    debug: {[flags]debug} \
    {posargs:tests/integration}

[testenv:{py310-,py311-,py312-,}plain]
setenv =
    PHARMPYNOCONFIGFILE=0
skip_install = false
deps =
    -rrequirements.txt
commands = {posargs}

[testenv:spell]
basepython = {env:TOXPYTHON:python2.7}
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -j auto -b spelling docs dist/docs
deps =
    -r{toxinidir}/docs/requirements.txt
    sphinxcontrib-spelling
    pyenchant

[testenv:{py310-,py311-,py312-,}docs-{build,test}]
skip_install = false
deps =
    -rrequirements.txt
    -r{toxinidir}/docs/requirements.txt
commands =
    pip install ipykernel==5.5.5  # Unable to build docs with newer version
    pip install sphinx>=5.1.1
    pip install sphinx-tabs>=3.4.1
    build: rm -rf docs/api
    build: sphinx-build {posargs:-E} -j auto -b html docs dist/docs
    build: sphinx-build -j auto -b linkcheck docs dist/docs
    test: sphinx-build {posargs:-E} -j auto -b doctest docs dist/docs

[testenv:{py310-,py311-,py312-,}{lint,format}]
deps =
    -rlint-requirements.txt
commands =
    check-manifest \
    format: -u \
    -v {toxinidir}
    black \
    lint: --check --diff \
    src tests setup.py
    flake8 src tests setup.py
    isort \
    lint: --check --diff \
    src tests setup.py
    bash scripts/lint_deps_imports.sh

[testenv:{py310-,py311-,py312-,}{type-check}]
deps =
    -rrequirements.txt
    -rlint-requirements.txt
commands =
    pyright {posargs:src/pharmpy/deps src/pharmpy/internals}

[testenv:{py310-,py311-,py312-,}report]
deps = coverage
commands =
    coverage report
    coverage html

[testenv:clean]
commands = coverage erase
deps = coverage

[testenv:licenses]
skip_install = false
deps =
    -rrequirements.txt
    pip-licenses
commands =
    pip-licenses

[testenv:{py310-,py311-,py312-,}docs-lint]
skip_install = false
deps =
    darglint
commands =
    darglint --docstring-style numpy -z long src/pharmpy/modeling
    python scripts/lint_type_hints.py
